package GUI;

import java.io.UnsupportedEncodingException;
import peersim.Traffic.Query;
import peersim.config.Configuration;
import peersim.core.CommonState;
import peersim.core.Control;
import peersim.core.Network;
import peersim.core.Node;
import peersim.edsim.EDSimulator;
import peersim.pastry.MSPastryProtocol;
import peersim.pastry.RoutingTable;
import peersim.utils.HashSHA;

public class MyMSS extends javax.swing.JFrame implements Control{
    private final int pid;
    private final static String PAR_PROT = "protocol";
    public MyMSS(String prefix) {
        System.out.println(prefix);
        initComponents();
        this.setVisible(true);
        pid = Configuration.getPid(prefix + "." + PAR_PROT);
        this.PathCancion.setText("./Imagine_Dragons-Warriors.mp3");
        this.Cancion.setText("./Imagine_Dragons-Warriors.mp3");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        insert = new javax.swing.JButton();
        lookup = new javax.swing.JButton();
        PathCancion = new javax.swing.JTextField();
        Cancion = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        insert.setText("Ingresar cancion al DHT");
        insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertActionPerformed(evt);
            }
        });

        lookup.setText("Buscar cancion en DHT");
        lookup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lookupActionPerformed(evt);
            }
        });

        PathCancion.setText("Path de cancion");
        PathCancion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PathCancionActionPerformed(evt);
            }
        });

        Cancion.setText("Canción a buscar");
        Cancion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(PathCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Cancion, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(lookup))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(insert)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(PathCancion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(insert)
                .addGap(41, 41, 41)
                .addComponent(Cancion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lookup)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /* Genera una query a partir de los datos que estén en la interfaz gráfica
        y esta query es de tipo INSERT, para ingresar una canción al DHT
        Se calcula la llave de la ruta  de la canción elegida y se le asigna esta
        llave a un destinario que le corresponda esta llave
    */
    public Query readInsert(){
        String value = this.PathCancion.getText();
        if(value.equals("")){
            return null;
        }
        Query q = Query.makeInsert(value);
        q.timestamp = CommonState.getTime();
        q.value[0] = value;
        try {
            q.dest = HashSHA.applyHash(q.value[0]);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        q.key = q.dest;
        if(q.dest==null){
            System.out.println("TENEMOS UN PROBLEMA EN EL READINSERT DE MYMSS");
        }
        return q;
    }

     /* Genera una query a partir de los datos que estén en la interfaz gráfica
        y esta query es de tipo LOOKUP, para buscar una canción al DHT
        Se calcula la llave de la ruta  de la canción elegida y se le asigna esta
        llave a un destinario que le corresponda esta llave
    */
    public Query readLookUP(){
        String value = this.Cancion.getText();
        if(value.equals("")){
            return null;
        }
        Query q = Query.makeLookup(value);
        q.timestamp = CommonState.getTime();
        q.value[0] = value;
        try {
            q.dest = HashSHA.applyHash(q.value[0]);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        q.key = q.dest;
        if(q.dest==null){
            System.out.println("TENEMOS UN PROBLEMA EN EL READLOOKUP DE MYMSS");
        }
        return q;
    }
    /*
        Responde frente al evento del click de boton "Insertar" para generar un
        mensaje en la cola de eventos, este mensaje se envía al protocolo DFS.
        La query se basa en readInsert()
    */
    private void insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertActionPerformed
        Node start;
        Query q;
        System.out.println("IniciandoInsert_________________________________________________________");
        do {
            //RANDOM NODE GENERATE QUERY
            start = Network.get(CommonState.r.nextInt(Network.size()));
            if(start==null){
                continue;
            }
            System.out.println("Start: " + RoutingTable.truncateNodeId(((MSPastryProtocol) start.getProtocol(3)).nodeId));
            System.out.println("Nodo que lanza el trafico: "+start.getID());
        //Selecciona un nodo aleatorio hasta que encuentre uno que no este nulo y este UP
        } while (!start.isUp());
        q = readInsert();
        if(q==null){
            return;
        }
        q.src = ((MSPastryProtocol) start.getProtocol(pid - 1)).nodeId;
        EDSimulator.add(0, q, start, pid);
    }//GEN-LAST:event_insertActionPerformed
    /*
        Responde frente al evento del click de boton "Buscar" para generar un
        mensaje en la cola de eventos, este mensaje se envía al protocolo DFS.
        La query se basa en readLookUP()
    */
    private void lookupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lookupActionPerformed
        Node start;
        Query q;
        System.out.println("IniciandoLookUP_________________________________________________________");
        do {
            //RANDOM NODE GENERATE QUERY
            start = Network.get(CommonState.r.nextInt(Network.size()));
            if(start==null){
                continue;
            }
            System.out.println("Start: " + RoutingTable.truncateNodeId(((MSPastryProtocol) start.getProtocol(3)).nodeId));
            System.out.println("Nodo que lanza el lookup: "+start.getID());
        //Selecciona un nodo aleatorio hasta que encuentre uno que no este nulo y este UP
        } while (!start.isUp());
        q = readLookUP();
        if(q==null){
            return;
        }
        q.src = ((MSPastryProtocol) start.getProtocol(pid - 1)).nodeId;
        EDSimulator.add(0, q, start, pid);
    }//GEN-LAST:event_lookupActionPerformed

    private void PathCancionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PathCancionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PathCancionActionPerformed

    private void CancionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CancionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Cancion;
    private javax.swing.JTextField PathCancion;
    private javax.swing.JButton insert;
    private javax.swing.JButton lookup;
    // End of variables declaration//GEN-END:variables
    /*Para poder ingresar tráfico se hace a través de una clase de control
      En esta clase se implementa control y se extiende la función execute, con
      tráfico basura para que el simulador no se detenga
    */
    @Override
    public boolean execute() {
        Node start;
        Query q;
        do {
            //RANDOM NODE GENERATE QUERY
            start = Network.get(CommonState.r.nextInt(Network.size()));
            if(start==null){
                continue;
            }
            //Selecciona un nodo aleatorio hasta que encuentre uno que no este nulo y este UP
        } while (!start.isUp());
        q = Query.makeInsert("hola");
        q.value[0] = null;
        q.dest = ((MSPastryProtocol) start.getProtocol(pid - 1)).nodeId;
        q.src = ((MSPastryProtocol) start.getProtocol(pid - 1)).nodeId;
        EDSimulator.add(1,q,start,4);
        return false;
    }
}
